# `skip`
#### Skip a given number of lines from the start of an input stream

This existed mostly because I found myself frequently doing:

```bash
something | head -n 20 ...
something | head -n 20 | tail -n 20 ...
something | head -n 40 | tail -n 20 ...
```

And the mental math is hard.

Instead, this is preferred:

```bash
something | head -n 20 ...
something | skip -n 20 | head -n 20 ...
something | skip -n 40 | head -n 20 ...
```

This also has the benefit unlike tail, that it will start
emitting very early, as opposed to at the end of IO.

I know the code looks really similar, but the amount of thinking
required to make sure the first does what I expect it to is a lot.

While the second hand allows for linear mental processing without
mental backtracking.

> take a stream, skip the first 20 elements, return the next 20 elements

Is much easier to understand than:

> take a stream, take the first 40 elements, then take the last 20 elements of that

### SEE ALSO

## tail

Turns out, GNU `tail` has this feature inbuilt, but the documentation pays
so little attention to it you could easily overlook it.

> ```
> -n, --lines=[+]NUM
>   output the last NUM lines, instead of the last 10; or use
>   -n +NUM to output starting with line NUM
> ```

```bash
perl -E 'say for A..F' | cat -n | tail -n +2
#     2	B
#     3	C
#     4	D
#     5	E
#     6	F
```

This is naturally 1-larger than the equivalent number skip takes,
as `tail` implies 1-based indexing, where "2" is "Start at line
..."

```bash
perl -E 'say for A..F' | cat -n | skip -n 1
#     2	B
#     3	C
#     4	D
#     5	E
#     6	F
```

## head

GNU `head` has a similar complimentary function for "all but ... "

> ```
> -n, --lines=[-]NUM
>   print the first NUM lines instead of the first 10; with the
>   leading '-', print all but the last NUM lines of each file
> ```

```bash
perl -E 'say for A..F' | cat -n | head -n -2
#     1	A
#     2	B
#     3	C
#     4	D
```
